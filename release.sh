#!/usr/bin/env bash 

SEMTAG_OPTS="-p cip-v -b cip-master"

SEMTAG_COMMAND="$1"
SEMTAG_SCOPE="$2"

if [ -z "$SEMTAG_COMMAND" ]; then
  SEMTAG_COMMAND="final"
fi

if [ -z "$SEMTAG_SCOPE" ]; then
  SEMTAG_SCOPE="auto"
fi

echo "Using command '$SEMTAG_COMMAND' with scope '$SEMTAG_SCOPE'"

# We get the next version, without tagging
echo "Getting next version"
nextversion="$(source semtag $SEMTAG_COMMAND $SEMTAG_OPTS -fos $SEMTAG_SCOPE)"
echo "Publishing with version: $nextversion"

# We replace the placeholder in the source with the new version
replace="s/^PROG_VERSION=\"[^\"]*\"/PROG_VERSION=\"$nextversion\"/g"
sed -i.bak $replace semtag
# We replace the version in the README file with the new version
replace="s/^\[Version: [^[]*]/[Version: $nextversion]/g"
sed -i.bak "$replace" README.md
# We remove the backup README.md generated by the sed command
rm semtag.bak
rm README.md.bak

# We add both changed files
if ! git add semtag README.md ; then
  echo "Error adding modified files with new version"
  exit 1
fi

if ! git commit -m "Update readme and info to $nextversion" ; then
  echo "Error committing modified files with new version"
  exit 1
fi

if ! git push ; then
  echo "Error pushing modified files with new version"
  exit 1
fi

# We update the tag with the new version
source semtag $SEMTAG_COMMAND $SEMTAG_OPTS -f -v $nextversion
